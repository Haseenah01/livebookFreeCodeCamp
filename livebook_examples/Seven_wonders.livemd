# Seven Wonders

## Structs

This project teaches us how to properly define structs, how to use maps and keyword lists.

It also teaches us how to execute Enum functions and when to use them.

```elixir
defmodule Tutorials.Structs.SevenWonders do
  defstruct name: "", country: ""
  alias Tutorials.Structs.SevenWonders

  @type t :: %SevenWonders{
          name: String.t(),
          country: String.t()
        }

  # -------------------------All------------------------------------
  @spec all :: [t()]
  def all() do
    [
      %SevenWonders{name: "Taj Mahal", country: "India"},
      %SevenWonders{name: "Chichen Itza", country: "Mexico"},
      %SevenWonders{name: "Petra", country: "Jordan"},
      %SevenWonders{name: "Machu Picchu", country: "Peru"},
      %SevenWonders{name: "Christ the Redeemer", country: "Brazil"},
      %SevenWonders{name: "Colosseum", country: "Italy"},
      %SevenWonders{name: "The Great Wall of China", country: "China"}
    ]
  end

  # ------------------------------------------------------------------
  @spec print_names([t()]) :: :ok
  def print_names(wonders) do
    Enum.each(wonders, fn %{name: name} -> IO.puts(name) end)

    # can do piping as well for example:
    # def print_names(wonders) do
    # wonders
    # |> Enum.each(fn %{name: name} ->IO.puts(name) end)
  end
end
```

```elixir
all_wonders = Tutorials.Structs.SevenWonders.all()
```

```elixir
alias Tutorials.Structs.SevenWonders
SevenWonders.print_names(all_wonders)
```

## Filters

`Enum.sort` sorts the enumerable by the given function.

This function uses the merge sort algorithm. The given function should compare two arguments, and return true if the first argument precedes or is in the same place as the second one

```elixir
defmodule Tutorials.FStructs.SevenWonder do
  defstruct name: "", country: ""
  alias Tutorials.Structs.SevenWonders

  @type t :: %SevenWonders{
          name: String.t(),
          country: String.t()
        }

  # -------------------------All------------------------------------
  @spec all :: [t()]
  def all() do
    [
      %SevenWonders{name: "Taj Mahal", country: "India"},
      %SevenWonders{name: "Chichen Itza", country: "Mexico"},
      %SevenWonders{name: "Petra", country: "Jordan"},
      %SevenWonders{name: "Machu Picchu", country: "Peru"},
      %SevenWonders{name: "Christ the Redeemer", country: "Brazil"},
      %SevenWonders{name: "Colosseum", country: "Italy"},
      %SevenWonders{name: "The Great Wall of China", country: "China"}
    ]
  end

  # ------------------------------------------------------------------
  @spec print_names([t()]) :: :ok
  def print_names(wonders) do
    wonders
    |> Enum.each(fn %{name: name} -> IO.puts(name) end)
  end

  @spec filter_by_country([t()], String.t()) :: [t()]
  def filter_by_country(wonders, country) do
    wonders
    |> Enum.filter(fn %{country: country_name} -> country_name == country end)
  end

  @spec in_countries_starting_with_i([t()]) :: [t()]
  def in_countries_starting_with_i(wonders) do
    wonders
    |> Enum.filter(fn %{country: country} -> String.starts_with?(country, "I") end)
  end

  def sort_by_country_length(wonders) do
    wonders
    |> Enum.sort(fn x, y -> String.length(x.country) < String.length(y.country) end)
  end

  def name_country_list(wonders) do
    wonders
    |> Enum.reduce([], fn wonder, acc -> [[wonder.name, wonder.country] | acc] end)
  end

  def country_name_keyword_list(wonders) do
    wonders
    |> Enum.reduce([], fn wonder, acc -> [{String.to_atom(wonder.name), wonder.country} | acc] end)
  end

  # ----------------------------For--------------------------------

  def all_names(wonders) do
    for %{name: name} <- wonders, do: name
  end
end
```

```elixir
all_wonders = Tutorials.FStructs.SevenWonder.all()
```

```elixir
alias Tutorials.FStructs.SevenWonder
SevenWonder.filter_by_country(all_wonders, "India")
```

```elixir
SevenWonder.filter_by_country(all_wonders, "China")
```

```elixir
SevenWonder.in_countries_starting_with_i(all_wonders)
```

```elixir
SevenWonder.sort_by_country_length(all_wonders)
```

```elixir
SevenWonder.name_country_list(all_wonders)
```

```elixir
SevenWonder.country_name_keyword_list(all_wonders)
```

```elixir
Enum.map(all_wonders, fn wonder -> wonder.name end)
```

```elixir
Enum.map(all_wonders, & &1.name)
```

```elixir
for %{name: name} <- all_wonders, do: name
```

```elixir
SevenWonder.all_names(all_wonders)
```
