# Expense

## Section

```elixir
Date.new(2023, 04, 01)
```

```elixir
{:ok, date} = Date.new(2023, 04, 01)
```

```elixir
date
```

```elixir
~D[2023-04-01]
```

```elixir
defmodule Tutorials.Structs.Expense do
  alias Tutorials.Structs.Expense

  defstruct(
    title: "",
    date: nil,
    amount: 0,
    store: ""
  )

  @type t :: %Expense{
          title: String.t(),
          date: Date.t() | nil,
          amount: number(),
          store: String.t()
        }

  @spec sample :: [t()]
  def sample do
    [
      %Expense{title: "Grocery", date: ~D[2022-09-12], amount: 18.99, store: "Metro"},
      %Expense{title: "Mobile", date: ~D[2022-10-18], amount: 55.65, store: "Bell"},
      %Expense{title: "Jacket", date: ~D[2022-07-06], amount: 150.99, store: "Marks"},
      %Expense{title: "Air Jordans", date: ~D[2022-10-30], amount: 799.99, store: "Nike"}
    ]
  end

  @spec total([t]) :: number()
  def total(expenses) do
    expenses
    |> Enum.reduce(0, fn expense, acc -> expense.amount + acc end)
  end

  @spec sort_by_date([t()]) :: [t()]
  def sort_by_date(expenses) do
    expenses
    |> Enum.sort_by(& &1.date)
  end

  def add_expense(%Expense{} = expense) do
    [expense | sample()]
  end

  def update_amount(title, amount) do
    [item] = Enum.filter(sample(), fn %{title: expense_title} -> expense_title == title end)
    new_item = %{item | amount: amount}

    [new_item | sample() |> List.delete(item)]
  end
end
```

```elixir
alias Tutorials.Structs.Expense
sample = Expense.sample()
```

```elixir
Expense.total(sample)
```

```elixir
Expense.sort_by_date(sample)
```

```elixir
expense = %Expense{title: "Coffee", date: ~D[2023-04-01], amount: 10, store: "Metro"}
```

```elixir
Expense.add_expense(expense)
```

```elixir
Expense.update_amount("Grocery", 30)
```
