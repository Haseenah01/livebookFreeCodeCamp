# OTP Concurrency

## Genserver

A GenServer is a process like any other Elixir process and it can be used to keep state, execute code asynchronously and so on. The advantage of using a generic server process (GenServer) implemented using this module is that it will have a standard set of interface functions and include functionality for tracing and error reporting. It will also fit into a supervision tree.

To begin our GenServer we need to start it and handle the initialization. In most cases we’ll want to link processes so we use `GenServer.start_link/3`

The arguments will be passed to GenServer.`init/1` which sets the initial state through its return value.

```elixir
defmodule SimpleQueue do
  use GenServer

  @doc """
  Start our queue and link it.
  This is a helper function
  """
  def start_link(state \\ []) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  @doc """
  GenServer.init/1 callback
  """
  def init(state), do: {:ok, state}
end
```

## Synchronous Functions

It’s often necessary to interact with GenServers in a synchronous way, calling a function and waiting for its response. To handle synchronous requests we need to implement the `GenServer.handle_call/3` callback which takes: the request, the caller’s PID, and the existing state; it is expected to reply by returning a tuple: `{:reply, response, state}`.

```elixir
defmodule SimpleQueue1 do
  use GenServer

  ### GenServer API

  @doc """
  GenServer.init/1 callback
  """
  def init(state), do: {:ok, state}

  @doc """
  GenServer.handle_call/3 callback
  """
  def handle_call(:dequeue, _from, [value | state]) do
    {:reply, value, state}
  end

  def handle_call(:dequeue, _from, []), do: {:reply, nil, []}

  def handle_call(:queue, _from, state), do: {:reply, state, state}

  ### Client API / Helper functions

  def start_link(state \\ []) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  def queue, do: GenServer.call(__MODULE__, :queue)
  def dequeue, do: GenServer.call(__MODULE__, :dequeue)
end
```

```elixir
SimpleQueue1.start_link([1, 2, 3])
```

```elixir
SimpleQueue1.dequeue()
```

```elixir
SimpleQueue1.dequeue()
```

```elixir
SimpleQueue1.queue()
```

## Asynchronous Functions

Asynchronous requests are handled with the `handle_cast/2` callback. This works much like `handle_call/3` but does not receive the caller and is not expected to reply.

```elixir
defmodule SimpleQueue2 do
  use GenServer

  ### GenServer API

  @doc """
  GenServer.init/1 callback
  """
  def init(state), do: {:ok, state}

  @doc """
  GenServer.handle_call/3 callback
  """
  def handle_call(:dequeue, _from, [value | state]) do
    {:reply, value, state}
  end

  def handle_call(:dequeue, _from, []), do: {:reply, nil, []}

  def handle_call(:queue, _from, state), do: {:reply, state, state}

  @doc """
  GenServer.handle_cast/2 callback
  """
  def handle_cast({:enqueue, value}, state) do
    {:noreply, state ++ [value]}
  end

  ### Client API / Helper functions

  def start_link(state \\ []) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  def queue, do: GenServer.call(__MODULE__, :queue)
  def enqueue(value), do: GenServer.cast(__MODULE__, {:enqueue, value})
  def dequeue, do: GenServer.call(__MODULE__, :dequeue)
end
```

```elixir
SimpleQueue2.start_link([1, 2, 3])
```

```elixir
SimpleQueue2.queue()
```

```elixir
SimpleQueue2.enqueue(20)
```

```elixir
SimpleQueue2.queue()
```
