# Concurrency Example

## Processes

What is a process? - Processes in Elixir are lightweight. They're isolated from each other, which means a failure in one process doesn't affect another. Spawn - To create new processes. Process identifiers (PIDs) - A unique ID for each process.

```elixir
defmodule Example do
  def add(a, b) do
    IO.puts(a + b)
  end
end
```

```elixir
Example.add(2, 3)
```

To evaluate the function asynchronously we use `spawn/3:`

```elixir
spawn(Example, :add, [2, 3])
```

## Message Passing

To communicate, processes rely on message passing. There are two main components to this: `send/2` and `receive`

To listen we use `receive` to match messages. If no match is found the execution continues uninterrupted.

```elixir
defmodule Example1 do
  def listen do
    receive do
      {:ok, "hello"} -> IO.puts("World")
    end

    listen()
  end
end
```

```elixir
pid = spawn(Example1, :listen, [])
```

Sends a message to the given dest and returns the message.

dest may be a remote or local PID, a local port, a locally registered name, or a tuple in the form of `{registered_name, node}` for a registered name at another node.

```elixir
send(pid, {:ok, "hello"})
```

## Process Linking

One problem with spawn is knowing when a process crashes. For that we need to link our processes using `spawn_link`. Two linked processes will receive exit notifications from one another:

```elixir
defmodule Example2 do
  def explode, do: exit(:kaboom)
end
```

```elixir
spawn(Example2, :explode, [])
```

```elixir
# spawn_link(Example2, :explode, [])
```

Sometimes we don’t want our linked process to crash the current one. For that we need to trap the exits using `Process.flag/2`. It uses erlang’s `process_flag/2` function for the `trap_exit` flag. When trapping exits (`trap_exit` is set to true), exit signals will be received as a tuple message: `{:EXIT, from_pid, reason}`.

```elixir
defmodule Example3 do
  def explode, do: exit(:kaboom)

  def run do
    Process.flag(:trap_exit, true)
    spawn_link(Example3, :explode, [])

    receive do
      {:EXIT, _from_pid, reason} -> IO.puts("Exit reason: #{reason}")
    end
  end
end
```

```elixir
Example3.run()
```

## Process Monitoring

What if we don’t want to link two processes but still be kept informed? For that we can use process monitoring with `spawn_monitor`. When we monitor a process we get a message if the process crashes without our current process crashing or needing to explicitly trap exits.

```elixir
defmodule Example4 do
  def explode, do: exit(:kaboom)

  def run do
    spawn_monitor(Example4, :explode, [])

    receive do
      {:DOWN, _ref, :process, _from_pid, reason} -> IO.puts("Exit reason: #{reason}")
    end
  end
end
```

```elixir
Example4.run()
```

## Agents

Agents play a crucial role in managing and manipulating data within a system

They act as intermediaries between the user and the underlying background processes, ensuring that the state of the system remains consistent and up to date

We can access them from other processes within our application and node. The state of our Agent is set to our function’s return value:

```elixir
{:ok, agent} = Agent.start_link(fn -> [1, 2, 3] end)
```

```elixir
Agent.update(agent, fn state -> state ++ [4, 5] end)
```

```elixir
Agent.get(agent, & &1)
```

When we name an Agent we can refer to it by that instead of its PID:

```elixir
Agent.start_link(fn -> [1, 2, 3] end, name: Numbers)
```

```elixir
Agent.get(Numbers, & &1)
```

## Tasks

Tasks provide a way to execute a function in the background and retrieve its return value later.

It convert sequential code into concurrent code with `Task.async/1` while keeping its semantics. When invoked, a new process will be created, linked and monitored by the caller. Once the task action finishes, a message will be sent to the caller with the result

They can be particularly useful when handling expensive operations without blocking the application execution

```elixir
defmodule Example5 do
  def double(x) do
    :timer.sleep(2000)
    x * 2
  end
end
```

```elixir
task = Task.async(Example5, :double, [2000])
```

```elixir
Task.await(task)
```
