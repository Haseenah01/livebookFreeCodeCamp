# OTP Concurrency

## Genserver

A GenServer is a process like any other Elixir process and it can be used to keep state, execute code asynchronously and so on. The advantage of using a generic server process (GenServer) implemented using this module is that it will have a standard set of interface functions and include functionality for tracing and error reporting. It will also fit into a supervision tree.

To begin our GenServer we need to start it and handle the initialization. In most cases we’ll want to link processes so we use `GenServer.start_link/3`

The arguments will be passed to GenServer.`init/1` which sets the initial state through its return value.

```elixir
defmodule SimpleQueue do
  use GenServer

  @doc """
  Start our queue and link it.
  This is a helper function
  """
  def start_link(state \\ []) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  @doc """
  GenServer.init/1 callback
  """
  def init(state), do: {:ok, state}
end
```

## Synchronous Functions

It’s often necessary to interact with GenServers in a synchronous way, calling a function and waiting for its response. To handle synchronous requests we need to implement the `GenServer.handle_call/3` callback which takes: the request, the caller’s PID, and the existing state; it is expected to reply by returning a tuple: `{:reply, response, state}`.

```elixir
defmodule SimpleQueue1 do
  use GenServer

  ### GenServer API

  @doc """
  GenServer.init/1 callback
  """
  def init(state), do: {:ok, state}

  @doc """
  GenServer.handle_call/3 callback
  """
  def handle_call(:dequeue, _from, [value | state]) do
    {:reply, value, state}
  end

  def handle_call(:dequeue, _from, []), do: {:reply, nil, []}

  def handle_call(:queue, _from, state), do: {:reply, state, state}

  ### Client API / Helper functions

  def start_link(state \\ []) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  def queue, do: GenServer.call(__MODULE__, :queue)
  def dequeue, do: GenServer.call(__MODULE__, :dequeue)
end
```

```elixir
SimpleQueue1.start_link([1, 2, 3])
```

```elixir
SimpleQueue1.dequeue()
```

```elixir
SimpleQueue1.dequeue()
```

```elixir
SimpleQueue1.queue()
```

## Asynchronous Functions

Asynchronous requests are handled with the `handle_cast/2` callback. This works much like `handle_call/3` but does not receive the caller and is not expected to reply.

```elixir
defmodule SimpleQueue2 do
  use GenServer

  ### GenServer API

  @doc """
  GenServer.init/1 callback
  """
  def init(state), do: {:ok, state}

  @doc """
  GenServer.handle_call/3 callback
  """
  def handle_call(:dequeue, _from, [value | state]) do
    {:reply, value, state}
  end

  def handle_call(:dequeue, _from, []), do: {:reply, nil, []}

  def handle_call(:queue, _from, state), do: {:reply, state, state}

  @doc """
  GenServer.handle_cast/2 callback
  """
  def handle_cast({:enqueue, value}, state) do
    {:noreply, state ++ [value]}
  end

  ### Client API / Helper functions

  def start_link(state \\ []) do
    GenServer.start_link(__MODULE__, state, name: __MODULE__)
  end

  def queue, do: GenServer.call(__MODULE__, :queue)
  def enqueue(value), do: GenServer.cast(__MODULE__, {:enqueue, value})
  def dequeue, do: GenServer.call(__MODULE__, :dequeue)
end
```

```elixir
SimpleQueue2.start_link([1, 2, 3])
```

```elixir
SimpleQueue2.queue()
```

```elixir
SimpleQueue2.enqueue(20)
```

```elixir
SimpleQueue2.queue()
```

## OTP Supervisors

Supervisors are specialized processes with one purpose: monitoring other processes. These supervisors enable us to create fault-tolerant applications by automatically restarting child processes when they fail.

### Configuration

The magic of Supervisors is in the `Supervisor.start_link/2` function. In addition to starting our supervisor and children, it allows us to define the strategy our supervisor uses for managing child processes.

Children are defined using a list, either a list of module names:

```elixir
defmodule SimpleQueue.Application do
  use Application

  def start(_type, _args) do
    children = [
      SimpleQueue2
    ]

    opts = [strategy: :one_for_one, name: SimpleQueue2.Supervisor]
    Supervisor.start_link(children, opts)
  end
end
```

or a list of tuples if you want to include configuration options:

```elixir
defmodule SimpleQueue.Application1 do
  use Application

  def start(_type, _args) do
    children = [
      {SimpleQueue2, [1, 2, 3]}
    ]

    opts = [strategy: :one_for_one, name: SimpleQueue2.Supervisor]
    Supervisor.start_link(children, opts)
  end
end
```

```elixir
SimpleQueue2.queue()
```

If our `SimpleQueue` process were to crash or be terminated our Supervisor would automatically restart it as if nothing had happened

<!-- livebook:{"break_markdown":true} -->

### Child Specification

After the supervisor has started it must know how to start/stop/restart its children. Each child module should have a `child_spec/1` function to define these behaviors. The `use GenServer`, `use Supervisor`, and `use Agent` macros automatically define this method for us (SimpleQueue has `use GenServer`, so we do not need to modify the module), but if you need to define it yourself `child_spec/1` should return a map of options:

```elixir
defmodule Child_spec do
  def child_spec(opts) do
    %{
      id: SimpleQueue2,
      start: {__MODULE__, :start_link, [opts]},
      shutdown: 5_000,
      restart: :permanent,
      type: :worker
    }
  end
end
```

* **id** - Required key. Used by the supervisor to identify the child specification.

* **start** - Required key. The Module/Function/Arguments to call when started by the supervisor

* **shutdown** - Optional key. Defines child's behavior during shutdown.

  Options are:

  * `:brutal_kill` - Child is stopped immediately
  * `0` or a positive integer - time in milliseconds supervisor will wait before killing child process. If the process is a `:worker` type, **shutdown** defaults to `5000`.
  * `:infinity` - Supervisor will wait indefinitely before killing child process. Default for `:supervisor` process type. Not recommended for `:worker` type.

* **restart** - Optional key.

There are several approaches for handling child process crashes:

Approaches are:

* `:permanent` - Child is always restarted. Default for all processes

* `:temporary` - Child process is never restarted.

* `:transient` - Child process is restarted only if it terminates abnormally.

* **type** - Optional key. Processes can be either `:worker` or `:supervisor`. Defaults to `:worker`.

<!-- livebook:{"break_markdown":true} -->

### DynamicSupervisor

Supervisors normally start with a list of children to start when the app starts. However, sometimes the supervised children will not be known when our app starts up (for example, we may have a web app that starts a new process to handle a user connecting to our site). For these cases we will want a supervisor where the children can be started on demand. The DynamicSupervisor is used to handle this case.

Since we will not specify children, we only need to define the runtime options for the supervisor. The DynamicSupervisor only supports the `:one_for_one` supervision strategy:

```elixir
options = [
  name: SimpleQueue2.Supervisor,
  strategy: :one_for_one
]

DynamicSupervisor.start_link(options)
```

Then, to start a new SimpleQueue dynamically we'll use `start_child/2` which takes a supervisor and the child specification (again, `SimpleQueue` uses `use GenServer` so the child specification is already defined):

```elixir
{:ok, pid} = DynamicSupervisor.start_child(SimpleQueue2.Supervisor, SimpleQueue)
```

### Task Supervisor

Tasks have their own specialized Supervisor, the `Task.Supervisor`. Designed for dynamically created tasks, the supervisor uses `DynamicSupervisor` under the hood.

#### Setup

Including the `Task.Supervisor` is no different than other supervisors:

```elixir
children = [
  {Task.Supervisor, name: ExampleApp.TaskSupervisor, restart: :transient}
]

{:ok, pid} = Supervisor.start_link(children, strategy: :one_for_one)
```

The major difference between `Supervisor` and `Task.Supervisor` is that its default restart strategy is `:temporary` (tasks would never be restarted).

<!-- livebook:{"break_markdown":true} -->

#### Supervised Tasks

With the supervisor started we can use the `start_child/2` function to create a supervised task:

`{:ok, pid} = Task.Supervisor.start_child(ExampleApp.TaskSupervisor, fn -> background_work end)`

If our task crashes prematurely it will be re-started for us. This can be particularly useful when working with incoming connections or processing background work
