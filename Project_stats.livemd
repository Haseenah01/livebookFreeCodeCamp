# Project Stats

## Error

```elixir
defmodule Stats.Errors do
  @spec invalid_data_type() :: {atom(), String.t()}
  def invalid_data_type, do: {:error, "Invalid data type"}
end
```

## Validate

```elixir
defmodule Stats.Validators do
  alias Stats.Errors

  @spec validate_num_list([number()]) :: {boolean(), [number()]} | {atom(), String.t()}
  def validate_num_list(nums) when is_list(nums) do
    {Enum.all?(nums, fn el -> is_number(el) end), nums}
  end

  def validate_num_list(_), do: Errors.invalid_data_type()
end
```

## Mean

```elixir
defmodule Stats.CentralTendency.Mean do
  alias Stats.{Errors, Validators}
  # alias Stats.Validators
  # sum (sigma) / count

  @spec population_mean([number()]) :: number() | {atom(), String.t()}
  def population_mean([]), do: Errors.invalid_data_type()

  def population_mean(nums) when is_list(nums) do
    nums
    |> Validators.validate_num_list()
    |> calc_population_mean()
  end

  def population_mean(_), do: Errors.invalid_data_type()

  # ------------------------------------------------------------------------------------------

  @spec sample_mean([number()]) :: number() | {atom(), String.t()}
  def sample_mean(nums), do: population_mean(nums)

  # ------------------------------------------------------------------------------------------
  defp calc_population_mean({false, _}), do: Errors.invalid_data_type()

  defp calc_population_mean({true, nums}) do
    nums
    |> Enum.sum()
    |> mean(Enum.count(nums))
  end

  # ------------------------------------------------------------------------------------------

  defp mean(sigma, count), do: sigma / count
end
```

```elixir
alias Stats.CentralTendency.Mean
Mean.population_mean([10, 20, 30])
```

```elixir
Mean.population_mean([])
```

```elixir
Mean.population_mean("abc")
```

```elixir
Mean.sample_mean([10, 20, 30])
```

## Stats

```elixir
defmodule Stats do
  alias Stats.CentralTendency.Mean

  # def population_mean(nums), do: Mean.population_mean(nums)
  # does the same thing as above function
  defdelegate population_mean(nums), to: Mean

  defdelegate sample_mean(nums), to: Mean
end
```

```elixir
Stats.population_mean([10, 20, 30])
```

```elixir
Stats.sample_mean([3, 4, 5, 6, 7])
```
